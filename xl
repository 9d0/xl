#!/bin/lua9

local pt = g.pt
local ZP = g.ZP

-- constants
local NCOL <const> = 26			-- number of columns
local COLWIDTH <const> = 58		-- default column width
local GRIDFG <const> = 0xBBBBBBFF	-- grid foreground
local HDRBG <const> = 0xEEEEEEFF	-- header background

local crosscursor = {
	offset = { x = -7, y = -7},
	clr = {0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0,
	 0x03, 0xC0, 0x03, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF,
	 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xC0, 0x03, 0xC0,
	 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, },
	set = {0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80,
	 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x7F, 0xFE,
	 0x7F, 0xFE, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80,
	 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, }
}

-- global variables
local gridfg
local hdrbg
local table = {}	-- data in two-dimensional array: table[col][row] = value
local colwidth = {}	-- column widths indexed by column number
local hdrcolwidth
local rowheight
local hdrrowheight
local selection		-- coordinate of the selected cell, e.g. "C2"

-- return column name for nth column
function colname(n)
	if n < 1 then 
		return nil
	elseif n < 27 then
		return string.char(string.byte("A") - 1 + n)
	else
		return nil -- not implemented yet
	end
end

-- return column number for cell
function cellcolumn(cell)
	return (string.byte(string.sub(cell, 1, 1)) - string.byte("A") + 1)
end

-- return row number for cell
function cellrow(cell)
	return tonumber(string.sub(cell, 2))
end

-- return the top left point of cell
function celltopleft(cell)
	x = screen.r.min.x + hdrcolwidth
	for i = 1, cellcolumn(cell) - 1 do
		x = x + colwidth[i]
	end
	y = screen.r.min.y + hdrrowheight + (cellrow(cell)-1)*rowheight
	return g.pt(x,y)
end

-- initialize column widths based on table data
function initwidthsandheights()
	-- column widths
	hdrcolwidth = draw.stringsize(font, "WW").x
	for i = 1, NCOL do
		colwidth[i] = COLWIDTH
	end
	for column, rows in ipairs(table) do
		for row, value in ipairs(rows) do
			w = draw.stringsize(font, value).x + 2
			if w > colwidth[column] then
				colwidth[column] = w
			end
		end
	end
	-- row heights
	rowheight = draw.stringsize(font, "0").y - 2
	hdrrowheight = rowheight
end

-- returns the cell Point p is in
function ptincell(p)
	if p.x < screen.r.min.x or p.x > screen.r.max.x then
		return nil
	end
	if p.y < screen.r.min.y or p.x > screen.r.max.y then
		return nil
	end
	if p.x < screen.r.min.x+hdrcolwidth then
		-- p is in the header column
		return nil
	end
	if p.y < screen.r.min.y+hdrrowheight then
		-- p is in the header row
		return nil
	end
	-- p is in the grid
	-- find column
	x = screen.r.min.x + hdrcolwidth
	column = 1
	while x < p.x do
		x = x + colwidth[column]
		column = column+ 1
	end
	-- find row
	y = screen.r.min.y + hdrrowheight
	row = 1
	while y < p.y do
		y = y + rowheight
		row = row + 1
	end
	return colname(column-1) .. tostring(row-1)
end
	
function eresized()
	draw.draw(screen, screen.r, display.white, nil, ZP)
	-- draw headers
	draw.draw(screen, g.rect(screen.r.min.x, screen.r.min.y,
		screen.r.max.x, screen.r.min.y+hdrrowheight), hdrbg, nil, ZP)
	draw.draw(screen, g.rect(screen.r.min.x, screen.r.min.y,
		screen.r.min.x+hdrcolwidth, screen.r.max.y), hdrbg, nil, ZP)
	-- draw grid
	x = screen.r.min.x + hdrcolwidth
	i = 1
	while x < screen.r.max.x do
		draw.line(screen, pt(x, screen.r.min.y), pt(x, screen.r.max.y), 
				draw.END_SQUARE, draw.END_SQUARE, 0, gridfg, ZP)
		x = x + colwidth[i]
		i = i + 1
	end
	y = screen.r.min.y + hdrrowheight
	while y < screen.r.max.y do
		draw.line(screen, pt(screen.r.min.x, y), pt(screen.r.max.x, y), 
				draw.END_SQUARE, draw.END_SQUARE, 0, gridfg, ZP)
		y = y + rowheight
	end
	-- draw header column labels
	x = screen.r.min.x + hdrcolwidth
	i = 1
	while x < screen.r.max.x do
		half = math.floor(colwidth[i]/2)
		draw.string(screen, pt(x + half - math.floor(draw.stringsize(font, 
			colname(i)).x/2), screen.r.min.y), display.black, ZP, font, colname(i))
		x = x + colwidth[i]
		i = i + 1
	end
	-- draw header row labels
	y = screen.r.min.y + hdrrowheight
	i = 1
	half = math.floor(hdrcolwidth/2)
	while y < screen.r.max.y do
		draw.string(screen, pt(screen.r.min.x + half - 
			math.floor(draw.stringsize(font, tostring(i)).x/2), y), display.black,
			ZP, font, tostring(i))
		y = y + rowheight
		i = i + 1
	end
	-- draw table data
	left = screen.r.min.x + hdrcolwidth
	for column, rows in ipairs(table) do
		for row, value in ipairs(rows) do
			-- left justified
			x = left + 2
			-- right justified
			x = left + colwidth[column] - draw.stringsize(font, value).x
			y = screen.r.min.y + hdrrowheight + (row-1)*rowheight
			draw.string(screen, pt(x, y), display.black, ZP, font, value)
		end
		left = left + colwidth[column]
	end
	-- draw selection
	if selection then
		-- draw a thick rectangle around selection
		topleft = celltopleft(selection)
		topright = g.pt(topleft.x+colwidth[cellcolumn(selection)], topleft.y)
		btmleft = g.pt(topleft.x, topleft.y+rowheight)
		btmright = g.pt(topright.x, btmleft.y)
		draw.poly(screen, { topleft, topright, btmright, btmleft, topleft },
			draw.END_SQUARE, draw.END_SQUARE, 0, display.black, ZP)
		draw.poly(screen, { 	g.pt(topleft.x-1, topleft.y-1),
							g.pt(topright.x+1, topright.y-1),
							g.pt(btmright.x+1, btmright.y+1),
							g.pt(btmleft.x-1, btmleft.y+1),
							g.pt(topleft.x-1, topleft.y-1) },
			draw.END_SQUARE, draw.END_SQUARE, 0, display.black, ZP)
		-- draw the name of the selected cell into upper left corner of the grid
		-- draw.draw(screen, g.rect(screen.r.min.x, screen.r.min.y,
		-- 	screen.r.min.x+hdrcolwidth, screen.r.min.y+hdrrowheight), 
		-- 	hdrbg, nil, ZP)
		-- draw.string(screen, g.pt(screen.r.min.x+2,screen.r.min.y), 
		--	display.black, ZP, font, selection)
	end
end

-- populate table from filename
function get(filename)
	-- clear table
	for k in pairs(table) do
		table[k] = nil
	end
	-- initialize table
	for i = 1, NCOL do
		table[i] = {}
	end
	-- read tab separated values
	row = 1
	for line in io.lines(filename) do
		line = line:gsub("\r", "")
		col = 1
		for value in string.gmatch(line, "([^\t]*)") do
			table[col][row] = value
			col = col + 1
		end
		row = row + 1
	end
end

if not arg[1] then
	io.stderr:write("usage: xl <file>\n")
	os.exit("usage")
end
get(arg[1])
draw.init(arg[1])
initwidthsandheights()
gridfg = draw.allocimage(display, g.rect(0,0,1,1), screen.chan, 1, GRIDFG)
hdrbg = draw.allocimage(display, g.rect(0,0,1,1), screen.chan, 1, HDRBG)
event.init(event.MOUSE|event.KEYBOARD)
eresized()
while true do
	local e, ev = event.event()
	if e == event.KEYBOARD then
		if ev.kbdc == key.DEL then
			os.exit()
		end
	end
	if e == event.MOUSE then
		if ev.mouse.buttons == 1 then
			selection = ptincell(ev.mouse.xy)
			if selection then
				eresized()
			end
		end
	end
end
